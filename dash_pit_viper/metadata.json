{
  "src/lib/components/PvIcon.react.js": {
    "description": "pv-icon is a component that renders an svg icon.",
    "displayName": "PvIcon",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The className could be pv-icon, pv-icon-20, etc.",
        "defaultValue": {
          "value": "'pv-icon'",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The href is the ID of the pv-icon."
      }
    }
  },
  "src/lib/components/PvSelect.react.js": {
    "description": "pv-icon is a component that renders an svg icon.",
    "displayName": "PvSelect",
    "methods": [
      {
        "name": "focus",
        "docblock": "See Select#focus (in react-select)",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "See Select#focus (in react-select)"
      },
      {
        "name": "_setSelectRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ref",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getOptionsValue",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "countSelected",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "toggleDropdown",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "closeDropdown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "optionOnChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectAllClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "deselectAllClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "searchOnChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "options": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              },
              "description": "Array of options where the label and the value are the same thing - [string|number|bool]"
            },
            {
              "name": "object",
              "description": "Simpler `options` representation in dictionary format. The order is not guaranteed.\n{`value1`: `label1`, `value2`: `label2`, ... }\nwhich is equal to\n[{label: `label1`, value: `value1`}, {label: `label2`, value: `value2`}, ...]"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "exact",
                "value": {
                  "label": {
                    "name": "node",
                    "description": "The option's label",
                    "required": true
                  },
                  "value": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      },
                      {
                        "name": "bool"
                      }
                    ],
                    "description": "The value of the option. This value\ncorresponds to the items specified in the\n`value` property.",
                    "required": true
                  },
                  "disabled": {
                    "name": "bool",
                    "description": "If true, this option is disabled and cannot be selected.",
                    "required": false
                  },
                  "visible": {
                    "name": "bool",
                    "description": "If false, this option is hidden from view.",
                    "required": false
                  }
                }
              },
              "description": "An array of options {label: [string|number], value: [string|number]},\nan optional disabled field can be used for each option"
            }
          ]
        },
        "required": false,
        "description": "An array of options {label: [string|number], value: [string|number]},\nan optional disabled field can be used for each option",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "The value of the input. If `multi` is false (the default)\nthen value is just a string that corresponds to the values\nprovided in the `options` property. If `multi` is true, then\nmultiple values can be selected at once, and `value` is an\narray of items with values corresponding to those in the\n`options` prop.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "multi": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the user can select multiple values",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selectAll": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds the ability to select all options.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "deselectAll": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds the ability to deselect all options.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "searchable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to enable the searching feature or not",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The grey, default text shown when no option is selected",
        "defaultValue": {
          "value": "'Selected'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, this dropdown is disabled and the selection cannot be changed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "dataAlign": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Aligns the dropdown menu to the right or left of the container.",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "className of the dropdown element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "dropdownWidth": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "width of the dropdown element. Default: 100%",
        "defaultValue": {
          "value": "'100%'",
          "computed": false
        }
      },
      "withCountTag": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Defines if the select uses withCountTag or not",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the input changes"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      }
    }
  }
}